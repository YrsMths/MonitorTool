<Window x:Class="MonitorServer.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:vm="clr-namespace:MonitorServer.ViewModel"
        xmlns:local="clr-namespace:MonitorServer"
        xmlns:server="clr-namespace:Server;assembly=Server"
        xmlns:wpfcontrols="clr-namespace:VS_Presentation.WPFControls;assembly=VS_Presentation"
        mc:Ignorable="d"
        Title="MainWindow" Style="{StaticResource ResourceKey=WindowBaseStyleWithLoadedAnimation}" Height="650" Width="1050" MinHeight="650" MinWidth="1050" Foreground="#333333" FontSize="11">
    <Window.DataContext>
        <vm:MainWindow_ViewModel x:Name="vm"/>
    </Window.DataContext>
    <i:Interaction.Triggers>
        <i:EventTrigger EventName="Loaded">
            <i:InvokeCommandAction Command="{Binding ViewLoaded}"></i:InvokeCommandAction>
        </i:EventTrigger>
    </i:Interaction.Triggers>
    <Window.Resources>
        <Style x:Key="LocationCheckBox" TargetType="CheckBox">
            <Setter Property="IsChecked" Value="False"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="CheckBox">
                        <Grid>
                            <Path x:Name="_path_border" Data="M 0,4 A 4,4 0 1 1 0,5 Z" HorizontalAlignment="Left" VerticalAlignment="Center" StrokeThickness="1" Margin="1"/>
                            <Path x:Name="_path" Data="M 1,3 A 3,3 0 1 1 1,4 Z" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="1"/>
                            <TextBlock x:Name="_text" FontSize="10" Background="White" HorizontalAlignment="Left" VerticalAlignment="Center" Text="{TemplateBinding Content}" Margin="15 0 0 0" Foreground="#afafaf"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="true">
                                <Setter TargetName="_path" Property="Fill" Value="#3cb07f"/>
                                <Setter TargetName="_path_border" Property="Stroke" Value="#3cb07f"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="false">
                                <Setter TargetName="_path" Property="Fill" Value="#FFFFFF"/>
                                <Setter TargetName="_path_border" Property="Stroke" Value="#afafaf"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="30"/>
            <RowDefinition/>
        </Grid.RowDefinitions>
        <Rectangle Grid.Row="0" RadiusX="2" RadiusY="2" Fill="#e5e5e5"/>
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <TextBlock Text="MonitorTool" Grid.Column="0" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="15 0" Foreground="#333333" FontWeight="Bold"/>
            <TextBlock Text="{Binding version}" Grid.Column="1" HorizontalAlignment="Center" VerticalAlignment="Center"/>
            <wpfcontrols:WPFControl_ImageButton x:Name="CloseButton" Grid.Column="5" ButtonWidth="20" ButtonHeight="20" ImageWidth="16" ImageHeight="16" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="5" MouseOverBackground="#fb7373" ButtonCornerRadius="2" RegularSource="/MonitorServer;component/Resources/icon_toolbar_close.png">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="ButtonClick">
                        <i:InvokeCommandAction Command="{Binding CloseCommand}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </wpfcontrols:WPFControl_ImageButton>
            <wpfcontrols:WPFControl_ImageButton x:Name="MaxButton" Grid.Column="4"  ButtonWidth="20" ButtonHeight="20" ImageWidth="16" ImageHeight="16" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="5" MouseOverBackground="#cdcdcd" ButtonCornerRadius="2" RegularSource="/MonitorServer;component/Resources/icon_toolbar_max.png" ImageButtonClick="MaxButton_ImageButtonClick"/>
            <wpfcontrols:WPFControl_ImageButton x:Name="MinButton" Grid.Column="3"  ButtonWidth="20" ButtonHeight="20" ImageWidth="16" ImageHeight="16" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="5" MouseOverBackground="#cdcdcd" ButtonCornerRadius="2" RegularSource="/MonitorServer;component/Resources/icon_toolbar_min.png" ImageButtonClick="MinButton_ImageButtonClick"/>

        </Grid>
        
        <Grid Grid.Row="1" Margin="10">
            <Grid.RowDefinitions>
                <RowDefinition Height="40"/>
                <RowDefinition/>
                <RowDefinition Height="40"/>
                <RowDefinition Height="120"/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="260"/>
                <ColumnDefinition/>
                <ColumnDefinition Width="150"/>
                <ColumnDefinition Width="150"/>
            </Grid.ColumnDefinitions>

            <Grid Grid.ColumnSpan="2">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="40"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="40"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="60"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="40"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                
                <TextBlock Grid.Column="0" Grid.Row="0" Text="品牌" Margin="5" HorizontalAlignment="Right" VerticalAlignment="Center"/>
                <TextBlock Grid.Column="2" Grid.Row="0" Text="设备" Margin="5" HorizontalAlignment="Right" VerticalAlignment="Center"/>
                <TextBlock Grid.Column="4" Grid.Row="0" Text="部署方式" Margin="5" HorizontalAlignment="Right" VerticalAlignment="Center"/>
                <TextBlock Grid.Column="6" Grid.Row="0" Text="端口" Margin="5" HorizontalAlignment="Right" VerticalAlignment="Center"/>

                <wpfcontrols:WPFControl_TextBoxWithButton x:Name="brandBox" Grid.Column="1" Grid.Row="0" Margin="5" VerticalAlignment="Center" BoxBorderBrush="#DDDDDD" BoxBorderThickness="1" Height="Auto" Width="120" TextBoxText="{Binding brand.Name}" RegularSource="/MonitorServer;component/Resources/icon_arrow_down.png" ImageButtonClick="BrandBox_ImageButtonClick"/>
                <wpfcontrols:WPFControl_TextBoxWithButton x:Name="monitorBox" Grid.Column="3" Grid.Row="0" Margin="5" VerticalAlignment="Center" BoxBorderBrush="#DDDDDD" BoxBorderThickness="1" Height="Auto" Width="120" TextBoxText="{Binding equipment.Name}" RegularSource="/MonitorServer;component/Resources/icon_arrow_down.png" ImageButtonClick="MonitorBox_ImageButtonClick"/>
                <wpfcontrols:WPFControl_TextBoxWithButton x:Name="deploymentBox" Grid.Column="5" Grid.Row="0" Margin="5" VerticalAlignment="Center" BoxBorderBrush="#DDDDDD" BoxBorderThickness="1" Height="Auto" Width="120" TextBoxText="{Binding deployment.Name}" RegularSource="/MonitorServer;component/Resources/icon_arrow_down.png" ImageButtonClick="DeploymentBox_ImageButtonClick"/>
                <Border BorderThickness="1" BorderBrush="#DDDDDD" CornerRadius="2" Grid.Column="7" Grid.Row="0" Margin="5" VerticalAlignment="Center" Height="Auto" Width="120">
                    <TextBox x:Name="portBox" FocusVisualStyle="{x:Null}" BorderThickness="0" Margin="5" Text="{Binding port, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                </Border>
            </Grid>
            
            <!--<Border BorderThickness="1" BorderBrush="#DDDDDD" CornerRadius="2" Grid.Column="1" Grid.Row="1" Margin="5" VerticalAlignment="Center" Height="Auto" Width="150">
                <TextBox x:Name="ipBox" FocusVisualStyle="{x:Null}" BorderThickness="0" Margin="5" Text="{Binding ip, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
            </Border>-->

            <wpfcontrols:WPFControl_TextButton x:Name="StartListenButton" Grid.Column="2" Grid.Row="0" ButtonWidth="120" ButtonHeight="30" BorderRadius="5" RegularBackground="#3cb07f" MouseOverBackground="#4abe8e" MouseDownBackground="#2a7d5a" UnabledBackground="#DDDDDD" IsEnabled="{Binding isDisconnected}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="5" TextContent="开始监听" TextBrush="#FFFFFF">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="TextButtonClick">
                        <i:InvokeCommandAction Command="{Binding StartCommand}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </wpfcontrols:WPFControl_TextButton>
            <wpfcontrols:WPFControl_TextButton x:Name="StopListenButton" Grid.Column="3" Grid.Row="0" ButtonWidth="120" ButtonHeight="30" BorderRadius="5" RegularBackground="#3cb07f" MouseOverBackground="#4abe8e" MouseDownBackground="#2a7d5a" UnabledBackground="#DDDDDD" IsEnabled="{Binding isConnected}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="5" TextContent="停止监听" TextBrush="#FFFFFF">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="TextButtonClick">
                        <i:InvokeCommandAction Command="{Binding StopCommand}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </wpfcontrols:WPFControl_TextButton>

            <!--客户端列表-->
                <Border BorderBrush="#DDDDDD" BorderThickness="1" CornerRadius="2" Background="#FFFFFF" Grid.Column="0" Grid.Row="1" Grid.RowSpan="3" Margin="5">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="30"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <TextBlock Grid.Column="0" Grid.Row="0" Text="客户端列表" Margin="5" HorizontalAlignment="Left" VerticalAlignment="Top" Foreground="#afafaf"/>
                        <wpfcontrols:WPFControl_DataGrid Grid.Row="1" ItemsSource="{Binding clientItems}" Margin="5" type="{x:Type TypeName=server:Client}" x:Name="clientDataGrid">
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="RowMouseDown">
                                    <i:InvokeCommandAction Command="{Binding selectionchangedCommand}" CommandParameter="{Binding ElementName=clientDataGrid}"/>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </wpfcontrols:WPFControl_DataGrid>
                    </Grid>
                </Border>

                <!--数据接收-->
                <Border BorderBrush="#DDDDDD" BorderThickness="1" CornerRadius="2" Background="#FFFFFF" Grid.Column="1" Grid.Row="1" Grid.RowSpan="2" Margin="5">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="30"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <TextBlock Grid.Column="0" Grid.Row="0" Text="数据接收" Margin="5" HorizontalAlignment="Center" VerticalAlignment="Top" Foreground="#afafaf"/>
                        <!--<TextBlock Grid.Column="1" Grid.Row="0" Text="{Binding queueCount}" Margin="5" HorizontalAlignment="Center" VerticalAlignment="Top" Foreground="#afafaf"/>-->
                        <CheckBox Grid.Column="2" Grid.Row="0" Content="分包 | 无效数据将被过滤显示" Margin="5" Style="{StaticResource  LocationCheckBox}" x:Name="splitRadioButton" HorizontalAlignment="Center" VerticalAlignment="Top" IsChecked="{Binding isSplitPackage}">
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="Checked">
                                    <i:InvokeCommandAction Command="{Binding SplitCommand}"/>
                                </i:EventTrigger>
                                <i:EventTrigger EventName="Unchecked">
                                    <i:InvokeCommandAction Command="{Binding UnSplitCommand}"/>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </CheckBox>
                        <CheckBox Grid.Column="3" Grid.Row="0" Content="停止刷新显示" Margin="5" Style="{StaticResource LocationCheckBox}" x:Name="refreshShowRadioButton" HorizontalAlignment="Center" VerticalAlignment="Top" IsChecked="{Binding isStopRefresh}">
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="Unchecked">
                                    <i:InvokeCommandAction Command="{Binding refreshShowCommand}"/>
                                </i:EventTrigger>
                                <i:EventTrigger EventName="Checked">
                                    <i:InvokeCommandAction Command="{Binding stopRefreshShowCommand}"/>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </CheckBox>
                        <CheckBox Grid.Column="4" Grid.Row="0" Content="HEX" Margin="5" Style="{StaticResource LocationCheckBox}" x:Name="hexEncodingRadioButton" HorizontalAlignment="Center" VerticalAlignment="Top" IsChecked="{Binding isHexShow}">
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="Unchecked">
                                    <i:InvokeCommandAction Command="{Binding noHexEncodingCommand}"/>
                                </i:EventTrigger>
                                <i:EventTrigger EventName="Checked">
                                    <i:InvokeCommandAction Command="{Binding hexEncodingCommand}"/>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </CheckBox>
                        <TextBox FocusVisualStyle="{x:Null}" Grid.Row="1" Grid.ColumnSpan="5" BorderThickness="0"  Margin="5" Text="{Binding data, Mode=OneWay}" TextWrapping="Wrap" IsReadOnly="True" VerticalScrollBarVisibility="Auto"/>
                    </Grid>
                </Border>

                <Border BorderBrush="#DDDDDD" BorderThickness="1" CornerRadius="2" Background="#FFFFFF" Grid.Column="1" Grid.Row="3" Grid.RowSpan="2" Margin="5">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="30"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <TextBlock Grid.Column="0" Grid.Row="0" Text="数据发送" Margin="5" HorizontalAlignment="Left" VerticalAlignment="Top" Foreground="#afafaf"/>
                        <TextBox FocusVisualStyle="{x:Null}" Grid.Row="1" BorderThickness="0"  Margin="5" Text="" TextWrapping="WrapWithOverflow" VerticalScrollBarVisibility="Auto"/>
                    </Grid>
                </Border>



                <!--设备信息-->
                <Border BorderBrush="#DDDDDD" BorderThickness="1" CornerRadius="2" Background="#FFFFFF" Grid.Column="2" Grid.ColumnSpan="2" Grid.Row="1" Margin="5">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="30"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <TextBlock Grid.Column="0" Grid.Row="0" Text="设备信息" Margin="5" HorizontalAlignment="Left" VerticalAlignment="Top" Foreground="#afafaf"/>
                        <TextBlock Grid.Column="1" Grid.Row="0" Text="GUID" Margin="5" HorizontalAlignment="Right" VerticalAlignment="Top"/>
                        <TextBlock Grid.Column="2" Grid.Row="0" Text="{Binding GUID}" Margin="5" HorizontalAlignment="Right" VerticalAlignment="Top"/>
                        <wpfcontrols:WPFControl_DataGrid  Grid.Column="0" Grid.ColumnSpan="3" Grid.Row="1" Margin="5" ItemsSource="{Binding waveInfoItems}" Width="Auto" type ="{x:Type TypeName=local:WaveInfo}"/>
                    </Grid>
                </Border>
            <wpfcontrols:WPFControl_TextButton x:Name="CopyJsonButton" Grid.Column="2"  Grid.Row="2" ButtonWidth="120" ButtonHeight="30" BorderRadius="5" RegularBackground="#3cb07f" MouseOverBackground="#4abe8e" MouseDownBackground="#2a7d5a" UnabledBackground="#DDDDDD" HorizontalAlignment="Center" VerticalAlignment="Bottom" Margin="5" TextContent="复制JSON" TextBrush="#FFFFFF">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="TextButtonClick">
                            <i:InvokeCommandAction Command="{Binding CopyCommand}"/>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </wpfcontrols:WPFControl_TextButton>

            <wpfcontrols:WPFControl_TextButton x:Name="CopyXmlButton" Grid.Column="3"  Grid.Row="2" ButtonWidth="120" ButtonHeight="30" BorderRadius="5" RegularBackground="#3cb07f" MouseOverBackground="#4abe8e" MouseDownBackground="#2a7d5a" UnabledBackground="#DDDDDD" HorizontalAlignment="Center" VerticalAlignment="Bottom" Margin="5" TextContent="导出csv" TextBrush="#FFFFFF">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="TextButtonClick">
                            <i:InvokeCommandAction Command="{Binding ExportCommand}"/>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </wpfcontrols:WPFControl_TextButton>

            <wpfcontrols:WPFControl_TextButton x:Name="SendButton" Grid.Column="2" Grid.Row="3" ButtonWidth="120" ButtonHeight="30" BorderRadius="5" RegularBackground="#3cb07f" MouseOverBackground="#4abe8e" MouseDownBackground="#2a7d5a" UnabledBackground="#DDDDDD" HorizontalAlignment="Center" VerticalAlignment="Top" Margin="5" TextContent="发送数据" TextBrush="#FFFFFF">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="TextButtonClick">
                        <i:InvokeCommandAction Command="{Binding SendCommand}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </wpfcontrols:WPFControl_TextButton>

            <Popup x:Name="brandPopup" Width="200" StaysOpen="False" PlacementTarget="{Binding ElementName=brandBox}" Placement="Bottom" AllowsTransparency="True" PopupAnimation="Fade" VerticalOffset="10">
                <Grid x:Name="brandPopupGrid"  Width="180" Margin="8" Background="Transparent" HorizontalAlignment="Center" VerticalAlignment="Top">
                    <Border Width="180" x:Name="brandPopupBorder" BorderThickness="0" Background="White" CornerRadius="5" Padding="4">
                        <Border.Effect>
                            <DropShadowEffect ShadowDepth="0" BlurRadius="13" Opacity="0.5"/>
                        </Border.Effect>
                        <Grid>
                            <wpfcontrols:WPFControl_ContextMenuList x:Name="brandDropDownContext" ItemsSource="{Binding brandList}" Event_ContextMenuItemSelected="brandDropDownContext_Event_ContextMenuItemSelected">
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="MenuItemSelected">
                                        <i:InvokeCommandAction Command="{Binding BrandSelectedCommand}" CommandParameter="{Binding ElementName=brandDropDownContext}"/>
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                            </wpfcontrols:WPFControl_ContextMenuList>
                        </Grid>
                    </Border>
                </Grid>
            </Popup>

            <Popup x:Name="monitorPopup" Width="200" StaysOpen="False" PlacementTarget="{Binding ElementName=monitorBox}" Placement="Bottom" AllowsTransparency="True" PopupAnimation="Fade" VerticalOffset="10">
                <Grid x:Name="monitorPopupGrid"  Width="180" Margin="8" Background="Transparent" HorizontalAlignment="Center" VerticalAlignment="Top">
                    <Border Width="180" x:Name="monitorPopupBorder" BorderThickness="0" Background="White" CornerRadius="5" Padding="4">
                        <Border.Effect>
                            <DropShadowEffect ShadowDepth="0" BlurRadius="13" Opacity="0.5"/>
                        </Border.Effect>
                        <Grid>
                            <wpfcontrols:WPFControl_ContextMenuList x:Name="monitorDropDownContext" ItemsSource="{Binding equipmentList}" Event_ContextMenuItemSelected="monitorDropDownContext_Event_ContextMenuItemSelected">
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="MenuItemSelected">
                                        <i:InvokeCommandAction Command="{Binding EquipmentSelectedCommand}" CommandParameter="{Binding ElementName=monitorDropDownContext}"/>
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                            </wpfcontrols:WPFControl_ContextMenuList>
                        </Grid>
                    </Border>
                </Grid>
            </Popup>

            <Popup x:Name="deploymentPopup" Width="200" StaysOpen="False" PlacementTarget="{Binding ElementName=deploymentBox}" Placement="Bottom" AllowsTransparency="True" PopupAnimation="Fade" VerticalOffset="10">
                <Grid x:Name="RatioPopupGrid"  Width="180" Margin="8" Background="Transparent" HorizontalAlignment="Center" VerticalAlignment="Top">
                    <Border Width="180" x:Name="deploymentPopupBorder" BorderThickness="0" Background="White" CornerRadius="5" Padding="4">
                        <Border.Effect>
                            <DropShadowEffect ShadowDepth="0" BlurRadius="13" Opacity="0.5"/>
                        </Border.Effect>
                        <Grid>
                            <wpfcontrols:WPFControl_ContextMenuList x:Name="deploymentDropDownContext" ItemsSource="{Binding deploymentList}" Event_ContextMenuItemSelected="deploymentDropDownContext_Event_ContextMenuItemSelected">
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="MenuItemSelected">
                                        <i:InvokeCommandAction Command="{Binding DeploymentSelectedCommand}" CommandParameter="{Binding ElementName=deploymentDropDownContext}"/>
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                            </wpfcontrols:WPFControl_ContextMenuList>
                        </Grid>
                    </Border>
                </Grid>
            </Popup>
        </Grid>
        
    </Grid>
    
</Window>
